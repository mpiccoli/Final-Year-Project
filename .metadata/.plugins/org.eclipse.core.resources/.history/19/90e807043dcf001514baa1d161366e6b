package testTSPGA;

import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Vector;

import org.jgap.Chromosome;
import org.jgap.Gene;
import org.jgap.IChromosome;
import org.jgap.InvalidConfigurationException;
import org.jgap.impl.IntegerGene;

public class TestOfTest {

	public static void main(String[] args) {
		Vector<Vector<Point>> data=new Vector<Vector<Point>>();
		Vector<Point> cities= new Vector<Point>();
		cities.add(new Point(2,4)); 
		cities.add(new Point(7,5)); 
		cities.add(new Point(7,11)); 
		cities.add(new Point(8,1)); 
		cities.add(new Point(5,9)); 
		cities.add(new Point(0,11)); 
		cities.add(new Point(1,6));
		cities.add(new Point(2,7)); 
		cities.add(new Point(9,9)); 
		cities.add(new Point(0,8));
		
		cities.add(new Point(2232,43)); 
		cities.add(new Point(23,45)); 
		cities.add(new Point(45,21));
		cities.add(new Point(35,11232)); 
		cities.add(new Point(68,41235)); 
		cities.add(new Point(11233,46));
		cities.add(new Point(56,23)); 
		cities.add(new Point(21233,65)); 
		cities.add(new Point(45,12));
		IChromosome bestPath=null;
		try {
			bestPath = new Chromosome();
		} catch (InvalidConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		TSP_GA_Worker ft=new TSP_GA_Worker(data, bestPath);
		ft.addPropertyChangeListener(new PropertyChangeListener() {
			@Override
			public void propertyChange(PropertyChangeEvent evt) {
				if(ft.getProgress()==100 || ft.isDone()){
					//IChromosome optimal;
					System.out.println("Final Result:");
					System.out.println(bestPath.toString());
					//System.out.println("Score " +  (Integer.MAX_VALUE / 2 - bestPath.getFitnessValue()));
					//System.out.println(data.lastElement().toArray().toString());
					//optimal = tsp.findOptimalPath(null);
					//System.out.println("Solution: ");
					//System.out.println(optimal);
					//System.out.println("Score " + (Integer.MAX_VALUE / 2 - optimal.getFitnessValue()));
				}
				else{
					System.out.println("In Progress:");
					//updateBestResultSoFar(bestPath, cities);
					//System.out.println(((IChromosome) data.lastElement()).getGenes().toString());
					//double fitness=(Integer.MAX_VALUE / 2 - ((IChromosome)data.lastElement()).getFitnessValue());
					//System.out.println("Score " +  fitness);
					System.out.println(data.size());
				}
			}
		});
		ft.execute();
	}
	
	public static void updateBestResultSoFar(IChromosome ic, Vector<Point> cities){
		System.out.println(convertArrayResultToVectorPoint(ic.getGenes(), cities).toString());
		double score=(Integer.MAX_VALUE / 2 - ic.getFitnessValue());
		System.out.println("Score " + score);
	}
	
	private static Vector<Point> convertArrayResultToVectorPoint(Gene[] data, Vector<Point> cities){
		//Create some temporary object to store the data
		Vector<Point> points=new Vector<Point>();
		//Make a copy of the cities
		Vector<Point> tempCities=(Vector<Point>) cities.clone();
		points.setSize(data.length);
		//This loop inserts the elements in the right position
		for(int i=0; i<data.length; i++){
			IntegerGene gene = (IntegerGene) data[i];
			int index=(int) gene.getAllele();
			Point element=tempCities.elementAt(index);
			points.set(i, element);
		}
		return points;
	}
}
