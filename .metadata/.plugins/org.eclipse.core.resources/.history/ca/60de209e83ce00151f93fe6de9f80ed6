package geneticAlgorithms;

import java.awt.Point;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

import javax.swing.SwingWorker;

import org.jgap.Configuration;
import org.jgap.IChromosome;

public class Results_Observer extends SwingWorker implements Observer{
	
	private Vector<Vector<Point>> results;
	//private Vector<Point> cities;
	//private Configuration config;
	//private TSP_GA tsp;
	
	/*public TSP_Worker(Vector<Point> points, Configuration conf){
		cities=points;
		config=conf;
		results=new Vector<Vector<Point>>();
		tsp=new TSP_GA(points, conf);
	}*/
	public Results_Observer(){
		results=new Vector<Vector<Point>>();
	}
	
	
	@Override
	protected Object doInBackground() throws Exception {
		//tsp = new TSP_GA(cities, config);
		//Set a maximum number of interactions
		tsp.setMaxEvolution(1000);
		IChromosome optimal = tsp.findOptimalPath(null);
		System.out.println("Solution: ");
		System.out.println(optimal);
		System.out.println("Score " + (Integer.MAX_VALUE / 2 - optimal.getFitnessValue()));
		return null;
	}

	@Override
	public void update(Observable o, Object arg) {
		if (arg instanceof Vector) {
			results = (Vector<Vector<Point>>) arg;
			//Notify the thread of the update
			this.setProgress((int)(Math.random()*10));
			System.out.println("Updated");
		} 
		else {
			System.out.	println("NameObserver: Some other change to subject!");
		}
	}

}
