package geneticAlgorithms.CrossoverMethods;

import java.util.List;
import java.util.Vector;

import org.jgap.Configuration;
import org.jgap.Gene;
import org.jgap.IChromosome;
import org.jgap.InvalidConfigurationException;
import org.jgap.RandomGenerator;
import org.jgap.impl.CrossoverOperator;

public class OrderedCrossover extends CrossoverOperator{

	private static final long serialVersionUID = -3205548027106797115L;

	public OrderedCrossover(Configuration a_configuration) throws InvalidConfigurationException {
		super(a_configuration);
	}

	@SuppressWarnings("rawtypes")
	@Override
	protected void doCrossover(IChromosome firstMate, IChromosome secondMate, List a_candidateChromosomes, RandomGenerator generator) {

		Gene[] parentA = firstMate.getGenes();
		Gene[] parentB = secondMate.getGenes();
		int sizeChromosome=firstMate.size();
		//The fixed elements are 1/3 all the actual chromosome
		int numberFixedElements=sizeChromosome/3;
		
		//Determine the position of the elements that are going to be kept fixed in the children
		boolean done=false;
		int startIndex=0;
		while(!done){
			int indexFirstElement=(int)(Math.random()*sizeChromosome);
			//if the current randomized index + the number of fixed elements is less than the size of the chromosome, 
			//that means the scope is valid, therefore proceed with it, otherwise try again with another randomized index
			if(indexFirstElement+numberFixedElements<(sizeChromosome-1)){
				startIndex=indexFirstElement;
				done=true;
			}
		}
		//Create the two children which are going to contain the chromosome swapped 
		//Set their value to null for an easier manipulation later on with the developement of this crossover
		Vector<Gene> child1=new Vector<Gene>();
		Vector<Gene> child2=new Vector<Gene>();
		for(int i=0; i<firstMate.size(); i++){
			child1.add(null);
			child2.add(null);
		}
		//Copy the fixed elements containing within the scope found earlier from the parents to the children
		for(int i=startIndex; i<(startIndex+numberFixedElements); i++){
			child1.setElementAt(firstMate.getGene(i), i);
			child2.setElementAt(secondMate.getGene(i), i);
		}
		
		//The following loop fills the end-side of child1 with the elements from parentB that are not included yet
		boolean endChromosomeDone=false;
		int currentIndexInsertionChild1=startIndex+numberFixedElements+1;
		int currentPosParentB=startIndex+numberFixedElements+1;
		while(!endChromosomeDone){
			if(!child1.contains(secondMate.getGene(currentPosParentB))){
				child1.setElementAt(secondMate.getGene(currentPosParentB), currentIndexInsertionChild1);
				currentPosParentB++;
				currentIndexInsertionChild1++;
			}
			else{
				currentPosParentB++;
			}
			if(currentPosParentB==secondMate.size()-1){
				currentPosParentB=0;
			}
			if(currentIndexInsertionChild1==secondMate.size()-1){
				currentIndexInsertionChild1=0;
			}
		}
		
		//Add the chromosomes to the candidate list
		a_candidateChromosomes.add(firstMate);
		a_candidateChromosomes.add(secondMate);
	}
}
