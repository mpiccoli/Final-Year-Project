package geneticAlgorithms;

import org.jgap.Chromosome;
import org.jgap.Configuration;
import org.jgap.FitnessFunction;
import org.jgap.Gene;
import org.jgap.Genotype;
import org.jgap.IChromosome;
import org.jgap.Population;

public class Sales extends Salesman{
	private Configuration m_config;
	private int m_maxEvolution = 128;
	private int m_populationSize = 512;

	@Override
	public double distance(Gene a_from, Gene a_to) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public IChromosome createSampleChromosome(Object a_initial_data) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public IChromosome findOptimalPath(final Object a_initial_data) throws Exception {
		m_config = createConfiguration(a_initial_data);
	    FitnessFunction myFunc = createFitnessFunction(a_initial_data);
	    m_config.setFitnessFunction(myFunc);
	    // Now we need to tell the Configuration object how we want our
	    // Chromosomes to be setup. We do that by actually creating a
	    // sample Chromosome and then setting it on the Configuration
	    // object.
	    // --------------------------------------------------------------
	    IChromosome sampleChromosome = createSampleChromosome(a_initial_data);
	    m_config.setSampleChromosome(sampleChromosome);
	    // Finally, we need to tell the Configuration object how many
	    // Chromosomes we want in our population. The more Chromosomes,
	    // the larger number of potential solutions (which is good for
	    // finding the answer), but the longer it will take to evolve
	    // the population (which could be seen as bad). We'll just set
	    // the population size to 500 here.
	    // ------------------------------------------------------------
	    m_config.setPopulationSize(getPopulationSize());
	    // Create random initial population of Chromosomes.
	    // ------------------------------------------------

	    // As we cannot allow the normal mutations if this task,
	    // we need multiple calls to createSampleChromosome.
	    // -----------------------------------------------------
	    IChromosome[] chromosomes =
	        new IChromosome[m_config.getPopulationSize()];
	    Gene[] samplegenes = sampleChromosome.getGenes();
	    for (int i = 0; i < chromosomes.length; i++) {
	      Gene[] genes = new Gene[samplegenes.length];
	      for (int k = 0; k < genes.length; k++) {
	        genes[k] = samplegenes[k].newGene();
	        genes[k].setAllele(samplegenes[k].getAllele());
	      }
	      chromosomes[i] = new Chromosome(m_config, genes);
	    }
	    // Create the genotype. We cannot use Genotype.randomInitialGenotype,
	    // Because we need unique gene values (representing the indices of the
	    // cities of our problem).
	    // -------------------------------------------------------------------
	    Genotype population = new Genotype(m_config,
	                                       new Population(m_config, chromosomes));
	    IChromosome best = null;
	    // Evolve the population. Since we don't know what the best answer
	    // is going to be, we just evolve the max number of times.
	    // ---------------------------------------------------------------
	    Evolution:
	        for (int i = 0; i < getMaxEvolution(); i++) {
	      population.evolve();
	      best = population.getFittestChromosome();
	    }
	    // Return the best solution we found.
	    // ----------------------------------
	    return best;
	}


}
