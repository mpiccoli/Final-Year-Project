package geneticAlgorithms;
import java.awt.Point;
import java.util.Vector;

import org.jgap.Chromosome;
import org.jgap.Configuration;
import org.jgap.Gene;
import org.jgap.IChromosome;
import org.jgap.impl.IntegerGene;
import org.jgap.impl.StringGene;

public class TestGA extends org.jgap.impl.salesman.Salesman{
	Vector<Point> cities;

	@Override
	public IChromosome createSampleChromosome(Object arg0) {
		Configuration conf=new Configuration();
		//conf.set
		Gene[] genes=new Gene[cities.size()];
        for (int i = 0; i < cities.size(); i++) {
        	//No configuration has been passed
        	Gene gTemp=new IntegerGene(null, 0, cities.size()-1);
        	gTemp.setAllele(new Integer(i));
        	genes[i]=gTemp;
            //genes [i] = new IntegerGene(0, CITIES-1);
            //genes [i] .setAllele( new Integer (i));
        }

        Chromosome sample = new Chromosome ();

        System.out.println("Optimal way "+sample);
        System.out.println("Score "+
         (Integer.MAX_VALUE/2-m_conf.getFitnessFunction()
          .getFitnessValue(sample)));

        RandomGenerator g = new StockRandomGenerator();

        shuffle (genes);

        System.out.println("Sample chromosome "+sample);
        System.out.println("Score "+
         (Integer.MAX_VALUE/2-m_conf.getFitnessFunction()
          .getFitnessValue(sample)));

        return sample;
	}

	@Override
	public double distance(Gene arg0, Gene arg1) {
		
		return 0;
	}
	
	public static void main(String[] args){
		
	}

}
