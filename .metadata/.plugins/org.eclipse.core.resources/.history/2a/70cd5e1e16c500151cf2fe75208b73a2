package heuristicAlgorithms;

import java.awt.Point;
import java.util.Vector;

public class InsertionHeuristic {
	//Global Variables
		private Vector<Point> cities;
		private Vector<Point> resultData;
		private Vector<Integer> convexHull;
		private Vector<Double> travellingOrderDistances;
		private double resultTourDistance;
		private long executionTime;
		private long tourLength;
		private boolean processedCancelled;
		
		public InsertionHeuristic(Vector<Point> cities, Vector<Point> results){
			this.cities=cities;
			this.resultData=results;
			convexHull=new Vector<Integer>();
			travellingOrderDistances=new Vector<Double>();
			resultTourDistance=0;
			executionTime=0;
			tourLength=0;
			processedCancelled=false;
		}
		public long getExecutionTime(){
			return executionTime;
		}
		public long getTourLength(){
			return tourLength;
		}
		public double getTourDistance(){
			return resultTourDistance;
		}
		public Vector<Point> getListOfCities(){
			return (Vector<Point>) cities.clone();
		}
		public Vector<Point> getTravellingOrder(){
			return (Vector<Point>)resultData.clone();
		}
		private double calculateDistance(Point a, Point b){
			double xValue=(a.getX()-b.getX())*(a.getX()-b.getX());
			double yValue=(a.getY()-b.getY())*(a.getY()-b.getY());
			return Math.sqrt(xValue+yValue);
		}
		private void calculateExecutionTime(long startTime, long finishTime){
			//Verify that the Thread has not been stopped
			if(!processedCancelled){
				executionTime=(finishTime-startTime)/1000000;
			}
			else{
				executionTime=-1;
			}
		}

}
