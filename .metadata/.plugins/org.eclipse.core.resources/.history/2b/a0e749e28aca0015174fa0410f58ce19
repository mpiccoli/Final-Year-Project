package geneticAlgorithms;

import java.awt.Point;
import java.util.Vector;

import org.jgap.FitnessFunction;
import org.jgap.Gene;
import org.jgap.IChromosome;

public class MinimazingFitnessFunction extends FitnessFunction{
	double fitnessTarget;
	Vector<Point>cities;
	
	public MinimazingFitnessFunction(double value, Vector<Point> citiesData){
		if(value>0){
			fitnessTarget=value;
		}
		else{
			fitnessTarget=0;
		}
		cities=citiesData;
	}

	@Override
	protected double evaluate(IChromosome arg0) {
		//Retrieve the chromosome data
		Gene[] temp=arg0.getGenes();
		//Calculate total distance for this chromosome
		double totalDistance=0;
		for(int i=0; i<temp.length-1; i++){
			Point tempA=cities.elementAt((int) temp[i].getAllele());
			Point tempB=cities.get((int) temp[i+1].getAllele());
			double xValue=(tempA.getX()-tempB.getX())*(tempA.getX()-tempB.getX());
			double yValue=(tempA.getY()-tempB.getY())*(tempA.getY()-tempB.getY());
			totalDistance+=Math.sqrt(xValue+yValue);
		}
		//Close the loop
		Point tempA=cities.get(cities.size()-1);
		Point tempB=cities.get(0);
		double xValue=(tempA.getX()-tempB.getX())*(tempA.getX()-tempB.getX());
		double yValue=(tempA.getY()-tempB.getY())*(tempA.getY()-tempB.getY());
		totalDistance+=Math.sqrt(xValue+yValue);
		return totalDistance;
	}

}
