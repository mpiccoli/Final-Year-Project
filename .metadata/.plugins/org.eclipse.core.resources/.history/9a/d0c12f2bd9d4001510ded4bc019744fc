package geneticAlgorithms.CrossoverMethods;

import java.util.List;

import org.jgap.*;
import org.jgap.impl.CrossoverOperator;

public class CycleCrossover extends CrossoverOperator{
	private static final long serialVersionUID = 3110359141901206201L;
	
	public CycleCrossover(Configuration a_configuration) throws InvalidConfigurationException {
		super(a_configuration);
	}
	
	protected void doCrossover(IChromosome firstMate, IChromosome secondMate, List a_candidateChromosomes, RandomGenerator generator) {
		//System.out.println("Crossover ----------------------------");
		//System.out.println("firstMate: "+firstMate.toString());
		//System.out.println("secondMate: "+secondMate.toString());
		//System.out.println("List of candidates: "+a_candidateChromosomes.toString());
		Gene[] parentA = firstMate.getGenes();
	    Gene[] parentB = secondMate.getGenes();
	    int locus = generator.nextInt(parentA.length);
	    Gene gene1;
	    Gene gene2;
	    Object firstAllele;
	    for (int j = locus; j < parentA.length; j++) {
	      // Make a distinction for ICompositeGene for the first gene.
	      // ---------------------------------------------------------
	      int index = 0;
	      if (parentA[j] instanceof ICompositeGene) {
	        // Randomly determine gene to be considered.
	        index = generator.nextInt(parentA[j].size());
	        //System.out.println("Index "+index);
	        gene1 = ( (ICompositeGene) parentA[j]).geneAt(index);
	        //System.out.println("Gene1 for index "+gene1.toString());
	      }
	      else {
	        gene1 = parentA[j];
	      }
	      // Make a distinction for the second gene if CompositeGene.
	      // --------------------------------------------------------
	      if (parentB[j] instanceof ICompositeGene) {
	        gene2 = ( (ICompositeGene) parentB[j]).geneAt(index);
	        //System.out.println("Gene2 for index"+gene2.toString());
	      }
	      else {
	        gene2 = parentB[j];
	      }
	      if (m_monitorActive) {
	        gene1.setUniqueIDTemplate(gene2.getUniqueID(), 1);
	        gene2.setUniqueIDTemplate(gene1.getUniqueID(), 1);
	      }
	      //Swap values from gene1 and gene2
	      firstAllele = gene1.getAllele();
	      gene1.setAllele(gene2.getAllele());
	      gene2.setAllele(firstAllele);
	      //System.out.println("Gene1 Swapped"+gene1.toString());
	      //System.out.println("Gene2 Swapped"+gene2.toString());
	    }
	    // Add the modified chromosomes to the candidate pool so that
	    // they'll be considered for natural selection during the next
	    // phase of evolution.
	    // -----------------------------------------------------------
	    a_candidateChromosomes.add(firstMate);
	    a_candidateChromosomes.add(secondMate);
	    
	    System.out.println("End of Method N of candidates: "+a_candidateChromosomes.size());
	}
}
